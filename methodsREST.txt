
fetch() Здійснює асинхронний запит за допомогою за URL-адресою. 
За замовчуванням, об'єкт відповіді, який повертається функцією fetch(), має формат JSON.

Проте, функція res.json() забезпечує обробку цієї відповіді і конвертує її у JavaScript-об'єкт.
Це потрібно, оскільки fetch() повертає об'єкт Response, який має різні методи для обробки відповіді,
такі як json(), text(), blob(), formData(), і arrayBuffer().

Зазвичай, коли ви отримуєте JSON-відповідь від сервера, вам потрібно скористатися методом json(), 
щоб сконвертувати цю відповідь у вигляді JavaScript-об'єкта, з яким можна легко працювати.

-------
then() метод використовується для обробки результату асинхронної операції або обробки (Promise).

        fetch('https://api.example.com/data')
    .then(response => {
        // Обробка успішного результату запиту
        return response.json(); // Повертаємо об'єкт з розпарсеними даними JSON
    })
    .then(data => {
        // Обробка даних після їх отримання
        console.log(data);
    })
    .catch(error => {
        // Обробка помилок під час виконання запиту
        console.error('Помилка:', error);
    });

--------

json() - метод, який використовується для парсингу рядків JSON у об'єкти 
або для перетворення об'єктів на рядки JSON. В залежності від того, як його використовувати,
він може мати два основних застосування:
1.Парсинг рядка JSON у JavaScript-об'єкт: 
    const jsonString = '{"name": "John", "age": 30}';
    const jsonObject = JSON.parse(jsonString);
    console.log(jsonObject); // { name: 'John', age: 30 }
2.Перетворення JavaScript-об'єкта у рядок JSON
    const jsonObject = { name: 'John', age: 30 };
    const jsonString = JSON.stringify(jsonObject);
    console.log(jsonString); // '{"name":"John","age":30}'
    
--------

У цьому then() викликається метод .json() на об'єкті відповіді (res).
Цей метод повертає об'єкт Promise, який вирішується результатом парсингу тіла відповіді як JSON
