
1.Dot notation
Щоб отримати доступ(1.1) або присвоїти(1.2) якесь значення властивості використовуємо dot notation.
1.1 user.id;
1.2 user.age = user.age + 1;

2.Reading dynamic property(читання динамічного значення властивості)
Якщо значення властивості зберегли у змінній,то щоб отримати доступ треба використовувати [].
Приклад 1
const user = {
    id: 1,
    name: "Sam Green",
    age: 20
};
const key = "id";
user.key; // undefined 
user[key]; // 1

Приклад 2
const getValue = (user, keyToRead) => {
    return user[keyToRead];
}
getValue({id: 2, name: "Sam"}, "name"); // "Sam"
getValue({id: 2, name: "Sam"}, "id"); // 2

3.Object shorthand(скорочення об'єктів)

Якщо значення зберегли у змінній,то в об'єкті не варто ще раз вказувати це значення,достатньо просто вкласти цю змінну.
Приклад 1
const isAdmin = false;
const darkMode = true;
const settings = {
    isAdmin,
    darkMode
};
console.log(settings); //{isAdmin: false, darkMode: true}

4.Debugging tip(порада щодо налагодження процесу)

її суть полягає у тому,що коли ми візуалізуємо багато console.log(a) ми отримуємо лише ЗНАЧЕННЯ в консолі,що незручно читати,тому
використовуємо {}.

console.log(a) //2 => console.log({a}) // {a: 1}

5.Optional chaining operator(?.) - оператор опціонального/додаткового ланцюжка 

Оператор ?. - дозволяє безпечно отримувати доступ до ВЛАСТИВОСТЕЙ вкладених об'єктів,без виникнення помилок.Перед тим як його використовувати
потрібно переконатися,що об'єкт існує.

Коли існує ймовірність ,що деякі з властивостей можуть бути null або undefined,
то замість помилки Cannot read property 'x' of undefined" => null або undefined.

Часто ми пишемо перевірку чи кожна властивість містить значення:
Приклад 1
Представимо,що є об'єкт `user`
let name = undefined;
if (user.details && user.details.name && user.details.name.firstName) {
    name = user.details.name.firstName;
} 
Можемо це переписати: 
const name = user.details?.name?.firstName;

Приклад 2
const user = {
    details: {
        name: {
            firstName: "Sam"
        }
    },
    data: null
}
user.details?.name?.firstName; // "Sam"
user.data?.id; // undefined







