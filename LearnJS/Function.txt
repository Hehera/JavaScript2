1.Function
- Оголошення функцій JavaScript виконуються за допомогою ключового слова function.(Declaration) 
- Функції також можна визначити шляхом збереження функції у змінній.(Expressions)

1.2 Функції параметри(Function Parameters)
Існують два види спеціального синтаксису для параметрів функцій:
 1.Параметри за замовчуванням (default parameters) 
 Як зробити так щоб уникнути Nan,не використовуючи if умову ?Відповідь:встановити параметри за замовчуванням

 2.Параметри rest (rest parameters).
 Параметри rest дозволяють передавати необмежену кількість аргументів у функцію в масиві.
    function sum(...numbers) {
        return numbers.reduce((acc, num) => acc + num, 0);
    }
    console.log(sum(1, 2, 3, 4, 5)); // Виведе в консоль 15


2.Arrow functions(стрілкові функції)
Функції ми можемо оголосити вказавши її імя:
Приклад 1
function sum(a, b) {
    return a + b;
}
або присвоїти її до змінної та зробити її анонімною:
Приклад 2
const sum = function(a, b) {
    return a + b;
}
Щоб зробити функцію стрілковою:
 1.Забрати ключове слово function 
 2.Добавити = (parameters) => 

2.2 implicit return (неявне повернення)
Коли ти забув написати в звичайній функції return ми отримуємо undefined,так само і стрілковій,але є випадки 
коли можемо зробити неявне повернення:
 1.Функція має бути стрілочна 2.Видалити фігурні дужки 3.Видалити return
const isLegal = (age) => age >= 18;

 У стрілкових функціях немає змінної arguments,як у звичайних функціях.
 Замість цього вони використовують змінну зі списком параметрів(rest parameters).

Приклад 1
 Звичайна функція з використанням arguments:
    function sum() {
        let total = 0;
        for (let i = 0; i < arguments.length; i++) {
            total += arguments[i];
        }
        return total;
    }
    console.log(sum(1, 2, 3, 4)); // Виведе в консоль 10

Тепер подивімося на аналогічний приклад з використанням стрілкової функції:
    const sumArrow = (...args) => {
        return args.reduce((acc, num) => acc + num, 0);
    };



