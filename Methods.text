--------
String--
--------
1.split - з рядка в масив; протилежне join(glue).' ' - space(пробел)
2.to String - перетворює тип даних в рядок,наприклад 123 => '123'
3.  res.push(str[str.length - 1]);  - отримали останній елемент рядка
    res.push(str.length - 1); - отримали значення рядка тобто (7 - 1)= 6
4.endsWith - перевіряє останній символ(boolean); протилежне .startsWith - перевіряє початковий символ(boolean)
5.trim - removes all leading (at the beginning) and trailing (at the end) space characters.
6.replace(search,replace) - Шукає перше search і потім замінює його replace.
                    const message = "You are welcome.";
                    message.replace(" ", "_"); // "You_are welcome."; (only the first occurrence has been replaced)
                    console.log(message); // "You are welcome." (original string is not changed)
6.2.replaceAll() - замінює всі search, на replace.

7.at дозволяє читати символ за індексом (який також може бути від’ємним).
8.string.substring(indexStart(include()), indexEnd(ignore(optional))) використовується для повернення частини рядка.
substring - зе частина рядка.Наприклад з 'Hello world' -> взяли 'world'
--------
Number--
--------
1.toFixed(2) - добавляє нулі до десяткових чисел.



-------
Array--
-------
9.filter повертає новий масив, який містить всі елементи початкового масиву, для яких функція callback повернула true.
                    // .filter() ALWAYS returns an array
                    numbers.filter(function(number) {
                        return number >= 12;
                    }); // [14] .filter() always returns an array. Even if it matched one item or no items.
10.find повертає перший найдений елемент, для якого функція callback поверне true, або undefined, якщо такого елемента немає.
                    // .find() returns the first match or undefined
                    numbers.find(function(number) {
                        return number >= 12;  
                    }); // 14   якшо б не найшло було б undefined
11.map повертає новий масив, в якому кожен елемент є результатом виклику функції для кожного елемента вихідного масиву.

12.includes якщо міститься певне значення в масиві true інакше false.(для рядків теж використовується для пошуку підрядків)
                    const groceries = ["Apple", "Peach", "Tomato"];
                    groceries.includes("Tomato"); // true
                    groceries.includes("Bread"); // false
13.join з масива в рядок
                    const groceries = ["Apple", "Peach", "Tomato"];
                    groceries.join("; "); // "Apple; Peach; Tomato"
                    groceries.join(" . "); // "Apple . Peach . Tomato"
14.forEach -  ітерує по кожному елементу масиву і виконує певної дії для кожного елементу. 
Він не повертає нового масиву, а лише виконує задану функцію зворотного виклику(колбек) для кожного елементу масиву.
15.every(boolean) - використовується для перевірки того, чи задовольняють всі елементи масиву умові, вказаній у вигляді функції. 
                    const numbers = [15, 10, 20];
                    const allAbove10 = numbers.every(number => number >= 10); // true
                    const allAbove15 = numbers.every(number => number >= 15); // false
16.some(boolean) - перевіряє чи є хоча б один елемент у масиві, який задовольняє умові, вказаній у вигляді функції.
                    const numbers = [15, 10, 20];
                    const someOver18 = numbers.some(number => number >= 18); // true
                    const someUnder10 = numbers.some(number => number < 10); // false
17.splice(i,1)
i - це індекс 
1 - к-сть елементів,які будуть видалені починаючи з цього індекса.
18.reduce - використовується для зменшення масиву до одного значення,тому і reduce.
Passing 0 as initialValue is the same as declaring let sum = 0 when using .forEach() to calculate the sum.!
For multiplication, we use an initialValue of 1.
---------------
Basic methods--
---------------
slice - створює новий масив(або рядок) на основі існуючого та вертає вибрану частину не змінюючи існуючого масиву(рядка)
-------
Object--
-------
Object - глобальна змінна в JS
Object.keys(user) - вертає ключ з об`єкта у виді масива
Object.values(user) - вертає значення з об`єкта у виді масива
Object.entries(user) - вертає ключ-значення з об`єкта у виді масива












console.log(array("A1,B2,C3,D4,E5"));  з рядка в масив використовуючи split const parts = string.split(",");
shift() видаляє перший елемент і його виводить в консоль
pop(): видаляє останній елемент і його виводить в консоль

split() - з рядка в масив,розділений символами

splice(i,1)
i - це індекс 
1 - к-сть елементів,які будуть видалені починаючи з цього індекса.

join з масива в рядок, а метод split - для розділення рядка в підрядок.

spread operator (...)- передані аргументи перетворює в масив.

parseInt - з рядка в число


-----------------------------------------------
map(callback(element,index,array)) - повертає новий масив на основі поточного,в якому кожен елемент є результатом застосування функції до 
відповідного елемента вихідного масива.map не змінює вихідний масив.Кожний елемент змінюється за допомогою заданої функції 

const numbers = [1, 2, 3, 4, 5];
const doubledNumbers = numbers.map((number) => number * 2);
// doubledNumbers = [2, 4, 6, 8, 10]//повертає масив де функція застосовувалась до кожного елемента 

-----------------------------------------------
reduce () використовується для обчислення одного значення на основі всіх елементів масиву поточного масиву і не повертає новий масив,
а просто число як результат масива.Згортає значення масива в одне значення.


array.reduce(function(accumulator, currentValue, index, array) {
  // операції для обчислення нового значення аккумулятора
}, initialValue);


const numbers = [1, 2, 3, 4, 5];
const sum = numbers.reduce((accumulator, currentValue) => accumulator + currentValue, 0);
// sum = 15 // взаємодіє з поточним масивом і повертає результат обчислення,на основі всіх елементів масива.
-----------------------------------------------
filter - вертає новий масив,де залишуться тільки ті елементи,які відповідають умові.

const newArray = array.filter(callback(currentValue[, index[, array]]) {
  // умова
}, thisArg);

const numbers = [1, 2, 3, 4, 5];
const evenNumbers = numbers.filter((number) => number % 2 === 0);

console.log(evenNumbers); // [2, 4]
-----------------------------------------------
Метод find() є одним з методів масивів у JavaScript, який дозволяє знайти перший елемент у масиві,
який задовольняє певну умову, визначену у вигляді функції зворотного виклику (callback).
const numbers = [9, 5, 14, 3, 11];
const firstNumberAboveTen = numbers.find(function(number) {
    return number > 10;
});
console.log(firstNumberAboveTen); // 14
----------
The difference has to do with the return type of these 2 methods:
The .find() method returns the first item which matches the condition that you specify. If no items were found, you will get back undefined.
The .filter() method always returns an array. Even if it's empty.

const numbers = [9, 5, 14, 3, 11];


---------

includes() визначає, чи містить масив певний елемент, повертаючи залежно від цього true чи false.

Коли ми ставимо == - означає що ми порівнюємо рівність значень,а коли === рівність типів данних.


sort() сортує елементи масиву як рядки, а не як числа.

Коли ви використовуєте arr.sort(), це змінює оригінальний масив і сортує його.
Таким чином, при зверненні до елементів індексів у вихідному масиві, вони можуть не відповідати порядку у відсортованому масиві.

const arrSort = [...arr].sort((a, b) => b - a);  ми створюємо копію масиву arr і сортуємо копію, не змінюючи при цьому оригінальний масив. 
[...arr] - ми це тільки у змінну помістили самому масиву як параметр це значення не задавали.

indexOf - Якщо елемент знайдено, метод повертає індекс першого входження цього елемента масиві або -1.
const fruits = ['apple', 'banana', 'orange', 'apple', 'kiwi'];

const index = fruits.indexOf('apple');

console.log(index); //Виведе 0, тому що 'apple' перший елемент у масиві


slice використовується для створення підмасиву з наявного масиву.

const numbers = [1, 2, 3, 4, 5];

// Пример 1: slice без второго параметра
const result1 = numbers.slice(2);
console.log(result1); // Вывод: [3, 4, 5], потому что мы берем элементы с индекса 2 до конца массива

// Пример 2: slice с двумя параметрами
const result2 = numbers.slice(1, 4);
console.log(result2); // Вывод: [2, 3, 4], потому что мы берем элементы с индекса 1 до (4-1)

// Пример 3: slice с отрицательным вторым параметром
const result3 = numbers.slice(1, -1);
console.log(result3); // Вывод: [2, 3, 4], потому что отрицательный второй параметр указывает на конец массива

// Пример 4: slice с отрицательным первым параметром
const result4 = numbers.slice(-3);
console.log(result4); // Вывод: [3, 4, 5], потому что отрицательный первый параметр указывает на начало подмассива



some - вертає булінове значення
Він перевіряє, чи принаймні один елемент масиву задовольняє задану умову, 
і повертає true, якщо такий елемент існує, і false, якщо всі елементи не задовольняють умові.

const numbers = [1, 2, 3, 4, 5];

// Перевіряємо, чи є хоча б одне парне число в масиві
const hasEvenNumber = numbers.some(num => num % 2 === 0);

console.log(hasEvenNumber); // Виведе true, оскільки в масиві є парне число (2)

every - вертає булінове значення і перевіряє всі елементи масиву чи задовільняють умову у вигляді функції .

const numbers = [1, 2, 3, 4, 5];
const allPositive = numbers.every(function (element) {
  return element > 0;
});
console.log(allPositive); // Output: true


forEach - не створює новий масив перебирає поточний,і призначений для виконання функції зворотнього викликуcallback для кожного елемента.

let numbers = [1, 2, 3, 4, 5];

numbers.forEach(function(number, index) {
  console.log(`Element at index ${index}: ${number}`);
});

Когда использовать forEach:

Когда вам нужно выполнить какое-то действие для каждого элемента массива.
Когда вам не нужно создавать новый массив или изменять существующий.
Когда не использовать forEach:

Если вам нужно создать новый массив на основе существующего с измененными элементами, лучше использовать методы map, filter или reduce.
Если вы хотите проверить, удовлетворяют ли все элементы массива определенному условию, лучше использовать метод every.
Если вам нужно проверить, удовлетворяет ли хотя бы один элемент массива определенному условию, лучше использовать метод some.



Object.entries(a) - цей виклик методу Object.entries() перетворює об'єкт results на масив масивів, 
де кожен підмасив містить два елементи: перший елемент - це ключ з об'єкта results, 
а другий - відповідне йому значення.

const a = { a: 1, b: 2, c: 3 };
const entries2 = Object.entries(a);
console.log(entries2);// [ ['a', 1], ['b', 2], ['c', 3] ]









